{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///Users/lukini/MatchDay/apps/player/src/lib/supabase/server-client.ts"],"sourcesContent":["/**\n * Server-side Supabase client utilities for MatchDay\n * \n * Proper Next.js 15 App Router + Supabase Cloud server-side authentication\n * Uses @supabase/ssr for consistent cookie-based authentication\n */\n\nimport { createServerClient } from '@supabase/ssr'\nimport { NextRequest, NextResponse } from 'next/server'\nimport { cookies } from 'next/headers'\nimport { Database } from '@matchday/database'\n\n/**\n * Create a Supabase client for Server Components and API Routes\n * \n * Uses cookies for authentication state, consistent with browser client.\n * This ensures proper SSR and authentication across client/server boundary.\n */\nexport async function createServerSupabaseClient() {\n  const cookieStore = await cookies()\n\n  return createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n      cookieOptions: {\n        name: 'matchday-auth',\n        lifetime: 60 * 60 * 24 * 7, // 7 days\n        domain: undefined,\n        path: '/',\n        sameSite: 'lax',\n      },\n    }\n  )\n}\n\n/**\n * Create a Supabase client for API Routes with request/response handling\n * \n * This version can modify cookies in the response, necessary for auth operations\n * like login/logout in API routes.\n */\nexport function createUserSupabaseClient(request: NextRequest, response?: NextResponse) {\n  return createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          // Set cookies in the response if available\n          if (response) {\n            cookiesToSet.forEach(({ name, value, options }) => {\n              response.cookies.set(name, value, options)\n            })\n          }\n          // Also set in request for immediate use\n          cookiesToSet.forEach(({ name, value }) => {\n            request.cookies.set(name, value)\n          })\n        },\n      },\n      cookieOptions: {\n        name: 'matchday-auth',\n        lifetime: 60 * 60 * 24 * 7, // 7 days\n        domain: undefined,\n        path: '/',\n        sameSite: 'lax',\n      },\n    }\n  )\n}\n\n/**\n * Create an admin client with service role for elevated operations\n * \n * WARNING: Only use this in secure server-side contexts (API routes, server actions)\n * Never expose the service role key to the client!\n */\nexport function createAdminSupabaseClient() {\n  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n  \n  if (!supabaseServiceKey) {\n    throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY environment variable')\n  }\n  \n  return createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    supabaseServiceKey,\n    {\n      cookies: {\n        getAll() {\n          return []\n        },\n        setAll() {\n          // Admin client doesn't need cookies\n        },\n      },\n      auth: {\n        persistSession: false,\n        autoRefreshToken: false,\n      },\n    }\n  )\n}\n\n/**\n * Get authenticated user from server-side context\n * \n * Returns the user if authenticated, null otherwise\n */\nexport async function getServerUser() {\n  try {\n    const supabase = await createServerSupabaseClient()\n    const { data: { user }, error } = await supabase.auth.getUser()\n    \n    if (error || !user) {\n      return null\n    }\n    \n    return user\n  } catch (error) {\n    console.error('Error getting server user:', error)\n    return null\n  }\n}"],"names":[],"mappings":"AAAA;;;;;CAKC;;;;;;AAED;AAAA;AAEA;;;AASO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,kSAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,wRAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAEjC,EAAE,OAAM;gBACN,0DAA0D;gBAC1D,wDAAwD;gBACxD,iBAAiB;gBACnB;YACF;QACF;QACA,eAAe;YACb,MAAM;YACN,UAAU,KAAK,KAAK,KAAK;YACzB,QAAQ;YACR,MAAM;YACN,UAAU;QACZ;IACF;AAEJ;AAQO,SAAS,yBAAyB,OAAoB,EAAE,QAAuB;IACpF,OAAO,CAAA,GAAA,wRAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP;gBACE,OAAO,QAAQ,OAAO,CAAC,MAAM;YAC/B;YACA,QAAO,YAAY;gBACjB,2CAA2C;gBAC3C,IAAI,UAAU;oBACZ,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;wBAC5C,SAAS,OAAO,CAAC,GAAG,CAAC,MAAM,OAAO;oBACpC;gBACF;gBACA,wCAAwC;gBACxC,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE;oBACnC,QAAQ,OAAO,CAAC,GAAG,CAAC,MAAM;gBAC5B;YACF;QACF;QACA,eAAe;YACb,MAAM;YACN,UAAU,KAAK,KAAK,KAAK;YACzB,QAAQ;YACR,MAAM;YACN,UAAU;QACZ;IACF;AAEJ;AAQO,SAAS;IACd,MAAM,qBAAqB,QAAQ,GAAG,CAAC,yBAAyB;IAEhE,IAAI,CAAC,oBAAoB;QACvB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,CAAA,GAAA,wRAAA,CAAA,qBAAkB,AAAD,gFAEtB,oBACA;QACE,SAAS;YACP;gBACE,OAAO,EAAE;YACX;YACA;YACE,oCAAoC;YACtC;QACF;QACA,MAAM;YACJ,gBAAgB;YAChB,kBAAkB;QACpB;IACF;AAEJ;AAOO,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,MAAM;QACvB,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;QAE7D,IAAI,SAAS,CAAC,MAAM;YAClB,OAAO;QACT;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["file:///Users/lukini/MatchDay/packages/shared/src/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2NAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wLAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":["file:///Users/lukini/MatchDay/packages/shared/src/environment/validation.ts"],"sourcesContent":["/**\n * Environment Validation Utility for MatchDay\n * \n * Prevents database confusion by validating and clearly indicating\n * which environment (local/production) is currently active.\n */\n\nexport type Environment = 'development' | 'production' | 'test'\n\nexport interface EnvironmentConfig {\n  env: Environment\n  supabaseUrl: string\n  supabaseAnonKey: string\n  siteUrl: string\n  isDevelopment: boolean\n  isProduction: boolean\n  isLocal: boolean\n  isRemote: boolean\n  databaseType: 'local' | 'production'\n  adminAppUrl?: string\n}\n\nexport interface ValidationResult {\n  isValid: boolean\n  errors: string[]\n  warnings: string[]\n  config: EnvironmentConfig | null\n}\n\n/**\n * Validates environment configuration and returns detailed analysis\n */\nexport function validateEnvironment(): ValidationResult {\n  const errors: string[] = []\n  const warnings: string[] = []\n  \n  // Get environment variables\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n  const siteUrl = process.env.NEXT_PUBLIC_SITE_URL\n  const adminAppUrl = process.env.NEXT_PUBLIC_ADMIN_APP_URL\n  const nodeEnv = process.env.NODE_ENV as Environment || 'development'\n  \n  // Validate required variables\n  if (!supabaseUrl) {\n    errors.push('Missing NEXT_PUBLIC_SUPABASE_URL environment variable')\n  }\n  \n  if (!supabaseAnonKey) {\n    errors.push('Missing NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable')\n  }\n  \n  if (!siteUrl) {\n    errors.push('Missing NEXT_PUBLIC_SITE_URL environment variable')\n  }\n  \n  // Early return if critical variables missing\n  if (errors.length > 0) {\n    return {\n      isValid: false,\n      errors,\n      warnings,\n      config: null\n    }\n  }\n  \n  // Determine database type and environment characteristics\n  const isLocal = supabaseUrl?.includes('localhost') || supabaseUrl?.includes('127.0.0.1') || false\n  const isRemote = !isLocal\n  const isDevelopment = nodeEnv === 'development'\n  const isProduction = nodeEnv === 'production'\n  const databaseType: 'local' | 'production' = isLocal ? 'local' : 'production'\n  \n  // Validate URL format\n  try {\n    new URL(supabaseUrl!)\n  } catch {\n    errors.push(`Invalid NEXT_PUBLIC_SUPABASE_URL format: ${supabaseUrl}`)\n  }\n  \n  try {\n    new URL(siteUrl!)\n  } catch {\n    errors.push(`Invalid NEXT_PUBLIC_SITE_URL format: ${siteUrl}`)\n  }\n  \n  // Environment consistency checks\n  if (isDevelopment && isRemote) {\n    warnings.push('⚠️  DEVELOPMENT mode is using PRODUCTION database - this may be intentional but verify!')\n  }\n  \n  if (isProduction && isLocal) {\n    errors.push('❌ PRODUCTION mode cannot use LOCAL database')\n  }\n  \n  // Database URL validation\n  if (isLocal) {\n    if (!supabaseUrl?.match(/localhost:5432\\d/)) {\n      warnings.push(`Local database URL doesn't match expected pattern (localhost:5432x): ${supabaseUrl}`)\n    }\n  } else {\n    if (!supabaseUrl?.includes('.supabase.co')) {\n      warnings.push(`Production database URL doesn't match expected Supabase pattern: ${supabaseUrl}`)\n    }\n  }\n  \n  // Create config object\n  const config: EnvironmentConfig = {\n    env: nodeEnv,\n    supabaseUrl: supabaseUrl!,\n    supabaseAnonKey: supabaseAnonKey!,\n    siteUrl: siteUrl!,\n    isDevelopment,\n    isProduction,\n    isLocal,\n    isRemote,\n    databaseType,\n    adminAppUrl\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n    config\n  }\n}\n\n/**\n * Get current environment configuration (throws if invalid)\n */\nexport function getEnvironmentConfig(): EnvironmentConfig {\n  const result = validateEnvironment()\n  \n  if (!result.isValid || !result.config) {\n    throw new Error(`Invalid environment configuration:\\n${result.errors.join('\\n')}`)\n  }\n  \n  return result.config\n}\n\n/**\n * Check if current environment is safe for destructive operations\n */\nexport function isSafeForDestructiveOperations(): boolean {\n  try {\n    const config = getEnvironmentConfig()\n    return config.isDevelopment || config.isLocal\n  } catch {\n    return false\n  }\n}\n\n/**\n * Get environment display name with visual indicators\n */\nexport function getEnvironmentDisplayName(): string {\n  try {\n    const config = getEnvironmentConfig()\n    \n    if (config.isLocal) {\n      return `🟢 LOCAL (${config.env})`\n    } else {\n      return `🔴 PRODUCTION (${config.env})`\n    }\n  } catch {\n    return '❓ UNKNOWN'\n  }\n}\n\n/**\n * Get database display name with clear indicators\n */\nexport function getDatabaseDisplayName(): string {\n  try {\n    const config = getEnvironmentConfig()\n    const url = new URL(config.supabaseUrl)\n    \n    if (config.isLocal) {\n      return `🏠 Local Database (${url.host})`\n    } else {\n      return `☁️  Production Database (${url.hostname})`\n    }\n  } catch {\n    return '❓ Unknown Database'\n  }\n}\n\n/**\n * Log environment status to console with visual formatting\n */\nexport function logEnvironmentStatus(): void {\n  const result = validateEnvironment()\n  \n  console.group('🔧 Environment Configuration')\n  \n  if (result.config) {\n    const config = result.config\n    \n    console.log(`Environment: ${getEnvironmentDisplayName()}`)\n    console.log(`Database: ${getDatabaseDisplayName()}`)\n    console.log(`Site URL: ${config.siteUrl}`)\n    \n    if (config.adminAppUrl) {\n      console.log(`Admin URL: ${config.adminAppUrl}`)\n    }\n    \n    if (result.warnings.length > 0) {\n      console.group('⚠️  Warnings')\n      result.warnings.forEach(warning => console.warn(warning))\n      console.groupEnd()\n    }\n  }\n  \n  if (result.errors.length > 0) {\n    console.group('❌ Errors')\n    result.errors.forEach(error => console.error(error))\n    console.groupEnd()\n  }\n  \n  console.groupEnd()\n}\n\n/**\n * Create environment validation middleware for Next.js\n */\nexport function createEnvironmentMiddleware() {\n  return () => {\n    const result = validateEnvironment()\n    \n    if (!result.isValid) {\n      throw new Error(`Environment validation failed:\\n${result.errors.join('\\n')}`)\n    }\n    \n    // Log environment status in development\n    if (result.config?.isDevelopment) {\n      logEnvironmentStatus()\n    }\n  }\n}\n\n/**\n * Runtime environment validation (call this at app startup)\n */\nexport function validateEnvironmentAtStartup(): void {\n  try {\n    const middleware = createEnvironmentMiddleware()\n    middleware()\n    \n    const config = getEnvironmentConfig()\n    \n    // Show prominent warning for production database usage\n    if (config.isRemote && config.isDevelopment) {\n      console.warn('\\n' + '='.repeat(60))\n      console.warn('⚠️  WARNING: USING PRODUCTION DATABASE IN DEVELOPMENT!')\n      console.warn(`Database: ${getDatabaseDisplayName()}`)\n      console.warn('Make sure this is intentional!')\n      console.warn('='.repeat(60) + '\\n')\n    }\n    \n  } catch (error) {\n    console.error('\\n' + '='.repeat(60))\n    console.error('❌ ENVIRONMENT VALIDATION FAILED!')\n    console.error(error instanceof Error ? error.message : String(error))\n    console.error('='.repeat(60) + '\\n')\n    throw error\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 429, "column": 0}, "map": {"version":3,"sources":["file:///Users/lukini/MatchDay/packages/shared/src/index.ts"],"sourcesContent":["/**\n * @matchday/shared\n *\n * Shared utilities and helpers for MatchDay monorepo\n */\n\nexport * from './utils';\nexport * from './environment/validation';\n"],"names":[],"mappings":"AAAA;;;;CAIC;AAED;AACA","debugId":null}},
    {"offset": {"line": 450, "column": 0}, "map": {"version":3,"sources":["file:///Users/lukini/MatchDay/apps/player/src/lib/supabase/client.ts"],"sourcesContent":["/**\n * Supabase Client Configuration for MatchDay\n * \n * Proper Next.js 15 App Router + Supabase Cloud integration using @supabase/ssr\n * Handles client-side, server-side, and SSR authentication consistently\n * \n * Includes environment validation to prevent database confusion\n */\n\nimport { createBrowserClient } from '@supabase/ssr'\nimport { Database } from '@matchday/database'\nimport { validateEnvironmentAtStartup, getEnvironmentConfig } from '@matchday/shared'\n\n// Validate environment at startup to prevent database confusion\nvalidateEnvironmentAtStartup()\n\n// Get validated environment configuration\nconst envConfig = getEnvironmentConfig()\nconst { supabaseUrl, supabaseAnonKey } = envConfig\n\n/**\n * Supabase client for Client Components\n * \n * Uses @supabase/ssr for proper SSR support and Supabase Cloud compatibility.\n * Automatically handles authentication state with cookies for SSR consistency.\n */\nexport const supabase = createBrowserClient<Database>(\n  supabaseUrl,\n  supabaseAnonKey,\n  {\n    cookieOptions: {\n      name: 'matchday-auth',\n      lifetime: 60 * 60 * 24 * 7, // 7 days\n      domain: undefined,\n      path: '/',\n      sameSite: 'lax',\n    },\n  }\n)\n\n/**\n * Type-safe helper for getting the current user\n */\nexport async function getCurrentUser() {\n  try {\n    const { data: { user }, error } = await supabase.auth.getUser()\n    \n    if (error) {\n      console.error('Error getting current user:', error)\n      return null\n    }\n    \n    return user\n  } catch (error) {\n    console.error('Unexpected error getting current user:', error)\n    return null\n  }\n}\n\n/**\n * Type-safe helper for getting the current session\n */\nexport async function getCurrentSession() {\n  try {\n    const { data: { session }, error } = await supabase.auth.getSession()\n    \n    if (error) {\n      console.error('Error getting current session:', error)\n      return null\n    }\n    \n    return session\n  } catch (error) {\n    console.error('Unexpected error getting current session:', error)\n    return null\n  }\n}\n\n/**\n * Utility function to handle Supabase auth redirects\n */\nexport function getAuthRedirectUrl(path: string = '/dashboard') {\n  const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'\n  return `${baseUrl}${path}`\n}\n\n/**\n * Cookie management utilities for authentication recovery\n */\nexport function clearAuthCookies() {\n  if (typeof document === 'undefined') return\n\n  // Clear all Supabase auth cookies\n  const cookieNames = [\n    'matchday-auth',\n    'sb-access-token',\n    'sb-refresh-token',\n    'supabase-auth-token',\n    'supabase.auth.token'\n  ]\n\n  cookieNames.forEach(cookieName => {\n    // Clear cookie with various path and domain combinations\n    const clearCookie = (domain?: string, path: string = '/') => {\n      let cookieString = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=${path};`\n      if (domain) cookieString += ` domain=${domain};`\n      document.cookie = cookieString\n    }\n\n    // Clear with different path/domain combinations\n    clearCookie()\n    clearCookie(undefined, '/')\n    clearCookie(window.location.hostname)\n    clearCookie(`.${window.location.hostname}`)\n  })\n\n  // Also clear localStorage auth items\n  if (typeof localStorage !== 'undefined') {\n    const keys = Object.keys(localStorage)\n    keys.forEach(key => {\n      if (key.includes('supabase') || key.includes('auth')) {\n        localStorage.removeItem(key)\n      }\n    })\n  }\n\n  console.log('🧹 Cleared all authentication cookies and localStorage')\n}\n\n/**\n * Detect if a session has an invalid JWT token\n */\nexport function isInvalidJWTError(error: any): boolean {\n  if (!error) return false\n  \n  const message = error.message || error.toString()\n  return message.includes('invalid JWT') || \n         message.includes('signature is invalid') ||\n         message.includes('unable to parse or verify signature')\n}\n\n/**\n * Validate session health - checks if the session is usable\n */\nexport async function validateSessionHealth(session: any): Promise<boolean> {\n  if (!session?.access_token) return false\n  \n  try {\n    // Try a simple authenticated request to validate the token\n    const { data, error } = await supabase.auth.getUser()\n    \n    if (error && isInvalidJWTError(error)) {\n      console.log('🚨 Session health check failed: Invalid JWT detected')\n      return false\n    }\n    \n    return !error && !!data.user\n  } catch (error) {\n    if (isInvalidJWTError(error)) {\n      console.log('🚨 Session health check failed: Invalid JWT detected')\n      return false\n    }\n    return false\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 577, "column": 0}, "map": {"version":3,"sources":["file:///Users/lukini/MatchDay/apps/player/src/app/api/auth/health/route.ts"],"sourcesContent":["/**\n * Authentication Health Check API\n * \n * Lightweight endpoint to validate authentication token health.\n * Used by frontend to ensure auth state consistency between client and server.\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createUserSupabaseClient } from '@/lib/supabase/server-client';\nimport { isInvalidJWTError } from '@/lib/supabase/client';\n\nexport async function GET(request: NextRequest) {\n  try {\n    console.log('🏥 Auth health check requested');\n    \n    const supabase = createUserSupabaseClient(request);\n    const { data: { user }, error } = await supabase.auth.getUser();\n    \n    if (error) {\n      console.log('🏥 Auth health check - error:', error.message);\n      \n      if (isInvalidJWTError(error)) {\n        return NextResponse.json({\n          isHealthy: false,\n          status: 'INVALID_TOKEN',\n          message: 'Authentication token is invalid or corrupted',\n          action: 'CLEAR_COOKIES_AND_REAUTH',\n          details: error.message\n        }, { status: 401 });\n      }\n      \n      return NextResponse.json({\n        isHealthy: false,\n        status: 'AUTH_ERROR',\n        message: 'Authentication error occurred',\n        action: 'RETRY_OR_REAUTH',\n        details: error.message\n      }, { status: 401 });\n    }\n    \n    if (!user) {\n      console.log('🏥 Auth health check - no user');\n      return NextResponse.json({\n        isHealthy: false,\n        status: 'NO_USER',\n        message: 'No authenticated user found',\n        action: 'REDIRECT_TO_LOGIN'\n      }, { status: 401 });\n    }\n    \n    console.log('🏥 Auth health check - healthy:', user.email);\n    return NextResponse.json({\n      isHealthy: true,\n      status: 'HEALTHY',\n      message: 'Authentication is valid',\n      user: {\n        id: user.id,\n        email: user.email,\n        emailVerified: !!user.email_confirmed_at\n      },\n      validatedAt: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('🏥 Auth health check - unexpected error:', error);\n    \n    return NextResponse.json({\n      isHealthy: false,\n      status: 'VALIDATION_FAILED',\n      message: 'Failed to validate authentication',\n      action: 'RETRY_OR_REAUTH',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}\n\n/**\n * Health check response types for frontend consumption\n */\nexport interface AuthHealthResponse {\n  isHealthy: boolean;\n  status: 'HEALTHY' | 'INVALID_TOKEN' | 'AUTH_ERROR' | 'NO_USER' | 'VALIDATION_FAILED';\n  message: string;\n  action?: 'CLEAR_COOKIES_AND_REAUTH' | 'RETRY_OR_REAUTH' | 'REDIRECT_TO_LOGIN';\n  user?: {\n    id: string;\n    email: string;\n    emailVerified: boolean;\n  };\n  validatedAt?: string;\n  details?: string;\n}"],"names":[],"mappings":"AAAA;;;;;CAKC;;;AAED;AACA;AACA;;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,MAAM,WAAW,CAAA,GAAA,8JAAA,CAAA,2BAAwB,AAAD,EAAE;QAC1C,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;QAE7D,IAAI,OAAO;YACT,QAAQ,GAAG,CAAC,iCAAiC,MAAM,OAAO;YAE1D,IAAI,CAAA,GAAA,oJAAA,CAAA,oBAAiB,AAAD,EAAE,QAAQ;gBAC5B,OAAO,iSAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBACvB,WAAW;oBACX,QAAQ;oBACR,SAAS;oBACT,QAAQ;oBACR,SAAS,MAAM,OAAO;gBACxB,GAAG;oBAAE,QAAQ;gBAAI;YACnB;YAEA,OAAO,iSAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,WAAW;gBACX,QAAQ;gBACR,SAAS;gBACT,QAAQ;gBACR,SAAS,MAAM,OAAO;YACxB,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,IAAI,CAAC,MAAM;YACT,QAAQ,GAAG,CAAC;YACZ,OAAO,iSAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,WAAW;gBACX,QAAQ;gBACR,SAAS;gBACT,QAAQ;YACV,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,QAAQ,GAAG,CAAC,mCAAmC,KAAK,KAAK;QACzD,OAAO,iSAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,WAAW;YACX,QAAQ;YACR,SAAS;YACT,MAAM;gBACJ,IAAI,KAAK,EAAE;gBACX,OAAO,KAAK,KAAK;gBACjB,eAAe,CAAC,CAAC,KAAK,kBAAkB;YAC1C;YACA,aAAa,IAAI,OAAO,WAAW;QACrC;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4CAA4C;QAE1D,OAAO,iSAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,WAAW;YACX,QAAQ;YACR,SAAS;YACT,QAAQ;YACR,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}