{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["/**\n * Next.js Middleware for MatchDay Authentication\n * \n * Handles route protection, authentication state, and redirects.\n * Optimized for Next.js 15 App Router with Supabase Auth.\n * \n * Protected routes:\n * - /dashboard/* - Requires authentication\n * - /profile/* - Requires authentication\n * - /leagues/create - Requires authentication\n * - /admin/* - Requires admin role\n * \n * Public routes:\n * - /auth/* - Authentication pages\n * - / - Landing page\n * - /leagues - Public league browsing\n */\n\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\n// Environment variables\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\n// Protected route patterns\nconst PROTECTED_ROUTES = [\n  '/dashboard',\n  '/profile',\n  '/settings',\n  '/leagues/create',\n  '/leagues/manage',\n  '/teams/create',\n  '/teams/manage'\n];\n\n// Admin-only route patterns\nconst ADMIN_ROUTES = [\n  '/admin'\n];\n\n// Public auth routes (redirect if already authenticated)\nconst AUTH_ROUTES = [\n  '/auth/login',\n  '/auth/signup',\n  '/auth/forgot-password'\n];\n\nexport async function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n  \n  // Skip middleware for static files and API routes\n  if (\n    pathname.startsWith('/_next/') ||\n    pathname.startsWith('/api/') ||\n    pathname.includes('.') ||\n    pathname.startsWith('/favicon')\n  ) {\n    return NextResponse.next();\n  }\n\n  // Create Supabase client for server-side auth check\n  const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n    auth: {\n      persistSession: false,\n      autoRefreshToken: false,\n      detectSessionInUrl: false\n    }\n  });\n\n  // Get auth token from cookies\n  const token = request.cookies.get('sb-access-token')?.value;\n  let user = null;\n\n  if (token) {\n    try {\n      const { data: { user: authUser }, error } = await supabase.auth.getUser(token);\n      if (!error && authUser) {\n        user = authUser;\n      }\n    } catch (error) {\n      // Token is invalid, user will be null\n      console.warn('Invalid auth token:', error);\n    }\n  }\n\n  // Check if current path is protected\n  const isProtectedRoute = PROTECTED_ROUTES.some(route => \n    pathname.startsWith(route)\n  );\n  \n  const isAdminRoute = ADMIN_ROUTES.some(route => \n    pathname.startsWith(route)\n  );\n  \n  const isAuthRoute = AUTH_ROUTES.some(route => \n    pathname.startsWith(route)\n  );\n\n  // Handle protected routes\n  if (isProtectedRoute || isAdminRoute) {\n    if (!user) {\n      // Redirect to login with return URL\n      const returnUrl = encodeURIComponent(pathname + request.nextUrl.search);\n      return NextResponse.redirect(\n        new URL(`/auth/login?returnUrl=${returnUrl}`, request.url)\n      );\n    }\n\n    // Check admin permissions for admin routes\n    if (isAdminRoute) {\n      const isAdmin = user.user_metadata?.role === 'admin';\n      if (!isAdmin) {\n        // Redirect to dashboard with access denied message\n        return NextResponse.redirect(\n          new URL('/dashboard?error=access_denied', request.url)\n        );\n      }\n    }\n  }\n\n  // Handle auth routes (redirect if already authenticated)\n  if (isAuthRoute && user) {\n    // Check for return URL\n    const returnUrl = request.nextUrl.searchParams.get('returnUrl');\n    if (returnUrl) {\n      try {\n        // Validate the return URL is from the same origin\n        const returnUrlObj = new URL(returnUrl, request.url);\n        if (returnUrlObj.origin === request.nextUrl.origin) {\n          return NextResponse.redirect(returnUrlObj);\n        }\n      } catch {\n        // Invalid return URL, fallback to dashboard\n      }\n    }\n    \n    // Default redirect to dashboard\n    return NextResponse.redirect(new URL('/dashboard', request.url));\n  }\n\n  // Handle auth callback\n  if (pathname === '/auth/callback') {\n    const code = request.nextUrl.searchParams.get('code');\n    \n    if (code) {\n      try {\n        const { error } = await supabase.auth.exchangeCodeForSession(code);\n        \n        if (error) {\n          // Redirect to login with error\n          return NextResponse.redirect(\n            new URL('/auth/login?error=callback_error', request.url)\n          );\n        }\n\n        // Check for return URL in state\n        const returnUrl = request.nextUrl.searchParams.get('state');\n        if (returnUrl) {\n          try {\n            const returnUrlObj = new URL(returnUrl, request.url);\n            if (returnUrlObj.origin === request.nextUrl.origin) {\n              return NextResponse.redirect(returnUrlObj);\n            }\n          } catch {\n            // Invalid return URL, fallback to dashboard\n          }\n        }\n\n        // Successful callback, redirect to dashboard\n        return NextResponse.redirect(new URL('/dashboard', request.url));\n      } catch (error) {\n        console.error('Auth callback error:', error);\n        return NextResponse.redirect(\n          new URL('/auth/login?error=callback_error', request.url)\n        );\n      }\n    }\n  }\n\n  // Add auth headers for client-side use\n  const response = NextResponse.next();\n  \n  if (user) {\n    response.headers.set('x-user-id', user.id);\n    response.headers.set('x-user-email', user.email || '');\n    response.headers.set('x-user-role', user.user_metadata?.role || 'user');\n  }\n\n  return response;\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public folder files\n     */\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n};"],"names":[],"mappings":"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"}}]
}